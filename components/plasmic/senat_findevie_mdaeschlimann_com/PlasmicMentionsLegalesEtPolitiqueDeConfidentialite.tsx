// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b8xkEHrDAVAX8PJFrG8ohz
// Component: UnIem2rLOR-_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsgwqCmsblYtlP } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GWQCmsblYtlP/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: b8xkEHrDAVAX8PJFrG8ohz/projectcss
import sty from "./PlasmicMentionsLegalesEtPolitiqueDeConfidentialite.module.css"; // plasmic-import: UnIem2rLOR-_/css

createPlasmicElementProxy;

export type PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantMembers =
  {};
export type PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantsArgs =
  {};
type VariantPropType =
  keyof PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantsArgs;
export const PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgsType = {};
type ArgPropType =
  keyof PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgsType;
export const PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgProps =
  new Array<ArgPropType>();

export type PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__OverridesType =
  {
    root?: Flex__<"div">;
    img?: Flex__<typeof PlasmicImg__>;
    h1?: Flex__<"h1">;
    h2?: Flex__<"h2">;
    text?: Flex__<"div">;
    ul?: Flex__<"ul">;
  };

export interface DefaultMentionsLegalesEtPolitiqueDeConfidentialiteProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__RenderFunc(props: {
  variants: PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantsArgs;
  args: PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgsType;
  overrides: PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgwqCmsblYtlP()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__r1OX)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? "50%"
                  : "100%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/senat_findevie_mdaeschlimann_com/images/_2023449120SKjpg.jpg",
                fullWidth: 8192,
                fullHeight: 5464,
                aspectRatio: undefined
              }}
            />

            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Marie-Do Aeschlimann"}
            </h1>
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"S\u00e9natrice des Hauts-de-Seine"}
            </h2>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__dqWv2)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__x5Gia
                    )}
                  >
                    {"Donn\u00e9es personnelles"}
                  </h4>
                }
                <React.Fragment>
                  {
                    "Les donn\u00e9es personnelles collect\u00e9es ont pour finalit\u00e9\n"
                  }
                </React.Fragment>
                {
                  <ul
                    data-plasmic-name={"ul"}
                    data-plasmic-override={overrides.ul}
                    className={classNames(
                      projectcss.all,
                      projectcss.ul,
                      sty.ul
                    )}
                  >
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li__yYCzf
                      )}
                    >
                      {
                        "de permettre aux visiteurs de s\u2019abonner \u00e0 la newsletter de Mme Marie-Do Aeschlimann. Dans ce cas, les donn\u00e9es sont conserv\u00e9es dans la limite de la demande de retrait (opt out) que ferait la personne abonn\u00e9e."
                      }
                    </li>
                    <li
                      className={classNames(
                        projectcss.all,
                        projectcss.li,
                        projectcss.__wab_text,
                        sty.li___9JIsv
                      )}
                    >
                      {
                        "de permettre aux visiteurs d\u2019envoyer une correspondance \u00e0 Mme Marie-Do Aeschlimann via le formulaire de contact. Dans ce cas les donn\u00e9es sont conserv\u00e9es dans la limite fix\u00e9e par la l\u00e9gislation et -au plus- celle des mandats \u00e9lectifs de Mme Marie-Do Aeschlimann."
                      }
                    </li>
                  </ul>
                }
                <React.Fragment>
                  {
                    "Ce site web n\u2019utilise pas de cookies collectant des donn\u00e9es personnelles.\n\n"
                  }
                </React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__en4WE
                    )}
                  >
                    {"Respect des donn\u00e9es personnelles"}
                  </h4>
                }
                <React.Fragment>
                  {
                    "En vertu de la loi n\u00b0 78-17 du 6 janvier 1978 relative \u00e0 l\u2019informatique, aux fichiers et aux libert\u00e9s (dite \u201cloi CNIL\u201d), vos coordonn\u00e9es ne seront en aucun cas utilis\u00e9es \u00e0 d\u2019autres fins ou divulgu\u00e9es \u00e0 un tiers \u00e0 l\u2019exception des co-contractants de Mme Marie-Do Aeschlimann qui n\u2019agiront que sur instruction et contr\u00f4le de celle-ci et qui seront soumis \u00e0 une stricte obligation de confidentialit\u00e9.\nConform\u00e9ment \u00e0 l\u2019article 38 de la loi CNIL, vous pouvez vous opposer \u00e0 ce que vos donn\u00e9es \u00e0 caract\u00e8re personnel fassent l\u2019objet d\u2019un traitement. Pour ce faire, il vous suffit de vous d\u00e9sabonner \u00e0 la newsletter de Mme Marie-Do Aeschlimann en cliquant sur \u201cse d\u00e9sinscrire\u201d. Vous serez alors imm\u00e9diatement d\u00e9sinscrit de la liste de diffusion et vos coordonn\u00e9es seront d\u00e9finitivement effac\u00e9es de notre traitement.\nConform\u00e9ment aux articles 39 et 40 de la loi CNIL, vous disposez \u00e0 tout moment d\u2019un droit d\u2019information, d\u2019acc\u00e8s, de modification, de rectification et de suppression des donn\u00e9es qui vous concernent. Pour l\u2019exercer, il vous suffit d\u2019adresser un message via ce formulaire de contact.\nNous utilisons Sendinblue en tant que plateforme marketing. En soumettant le formulaire d\u2019inscription \u00e0 la newsletter de Marie-Do Aeschlimann, vous reconnaissez que les informations que vous allez fournir seront transmises \u00e0 Sendinblue en sa qualit\u00e9 de processeur de donn\u00e9es; et ce conform\u00e9ment \u00e0 ses conditions g\u00e9n\u00e9rales d\u2019utilisation.\n\n"
                  }
                </React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__s48PV
                    )}
                  >
                    {"Directeur de la publication"}
                  </h4>
                }
                <React.Fragment>
                  {
                    "Marie-Do Aeschlimann\n\u00a9 Marie-Do Aeschlimann 2023. Tous droits d\u2019auteur r\u00e9serv\u00e9s.\n\n"
                  }
                </React.Fragment>
                {
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__dQmF
                    )}
                  >
                    {"H\u00e9bergement"}
                  </h4>
                }
                <React.Fragment>
                  {
                    "OVH\n2 rue Kellermann 59100 Roubaix \u2013 France\nwww.ovh.com\nT\u00e9l : 0899 701 761\n(1,349 \u20ac ttc / appel puis 0,337 \u20ac ttc / min)"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "h2", "text", "ul"],
  img: ["img"],
  h1: ["h1"],
  h2: ["h2"],
  text: ["text", "ul"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  h1: "h1";
  h2: "h2";
  text: "div";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantsArgs;
    args?: PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgProps,
          internalVariantPropNames:
            PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMentionsLegalesEtPolitiqueDeConfidentialite";
  } else {
    func.displayName = `PlasmicMentionsLegalesEtPolitiqueDeConfidentialite.${nodeName}`;
  }
  return func;
}

export const PlasmicMentionsLegalesEtPolitiqueDeConfidentialite = Object.assign(
  // Top-level PlasmicMentionsLegalesEtPolitiqueDeConfidentialite renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicMentionsLegalesEtPolitiqueDeConfidentialite
    internalVariantProps:
      PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__VariantProps,
    internalArgProps:
      PlasmicMentionsLegalesEtPolitiqueDeConfidentialite__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMentionsLegalesEtPolitiqueDeConfidentialite;
/* prettier-ignore-end */
